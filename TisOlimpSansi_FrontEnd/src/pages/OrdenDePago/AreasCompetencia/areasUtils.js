export function procesarAreasCompetencia(seleccionadas, categoriasSeleccionadas, cursoEstudiante) {
  return seleccionadas.map((area) => {
    const nombreArea = area.toUpperCase();
    
    // Usar la categor√≠a seleccionada directamente para todas las √°reas ahora
    const categoriaSeleccionada = categoriasSeleccionadas[area] || "";
    
    return {
      nombre_area: nombreArea,
      categoria: categoriaSeleccionada.toUpperCase(),
    };
  });
}

export function validarFormulario(seleccionadas, categoriasSeleccionadas) {
  console.log("üîç Validando formulario...");
  console.log("√Åreas seleccionadas:", seleccionadas);
  console.log("Categor√≠as seleccionadas:", categoriasSeleccionadas);
  
  // Si no hay √°reas seleccionadas, el formulario no es v√°lido
  if (!seleccionadas || seleccionadas.length === 0) {
    console.log("‚ùå No hay √°reas seleccionadas");
    return false;
  }

  // Verificar que cada √°rea seleccionada tenga una categor√≠a correspondiente v√°lida
  for (const area of seleccionadas) {
    const categoria = categoriasSeleccionadas[area];
    
    // Lista de mensajes que indican categor√≠as inv√°lidas
    const mensajesInvalidos = [
      "Sin categor√≠as disponibles",
      "Categor√≠a no disponible para este curso",
      "No hay categor√≠as disponibles"
    ];
    
    // Verificar si la categor√≠a es inv√°lida
    const esCategoriaInvalida = !categoria || 
                              categoria.trim() === "" ||
                              mensajesInvalidos.some(invalid => 
                                categoria.includes(invalid));
    
    if (esCategoriaInvalida) {
      console.log(`‚ùå √Årea ${area} tiene categor√≠a inv√°lida: "${categoria}"`);
      return false;
    }
    
    console.log(`‚úÖ √Årea ${area} tiene categor√≠a v√°lida: "${categoria}"`);
  }

  console.log("‚úÖ Formulario v√°lido");
  return true;
}