import { categoriasMap } from './areasConfig';

export function useCategoriasHandler(cursoEstudiante, areasCategorias = {}) {
  console.log("üéØ useCategoriasHandler - areasCategorias recibido:", areasCategorias);
  console.log("üéØ useCategoriasHandler - Claves disponibles:", Object.keys(areasCategorias));
  console.log("üéØ useCategoriasHandler - Curso estudiante:", cursoEstudiante);

  // Extraer informaci√≥n del grado del estudiante
  const obtenerInfoGrado = () => {
    const esPrimaria = cursoEstudiante.includes("Primaria");
    const esSecundaria = cursoEstudiante.includes("Secundaria");
    const match = cursoEstudiante.match(/\d+/);
    const numeroGrado = match ? parseInt(match[0], 10) : 0;
    
    const formatoCompleto = cursoEstudiante.toUpperCase().replace(/\s+/g, " ");
    
    return { 
      esPrimaria, 
      esSecundaria, 
      numeroGrado, 
      formatoCompleto 
    };
  };
  
  const { esPrimaria, esSecundaria, numeroGrado, formatoCompleto } = obtenerInfoGrado();

  // Funci√≥n para verificar si el grado del estudiante est√° en el rango de grados de una categor√≠a
  const gradoEstaEnRango = (categoria) => {
    if (!categoria || !categoria.grados || !Array.isArray(categoria.grados)) {
      console.log(`‚ùå Categor√≠a "${categoria?.nombre}" no tiene grados v√°lidos:`, categoria?.grados);
      return false;
    }
    
    console.log(`üîç Verificando si grado "${formatoCompleto}" est√° en rango de categor√≠a "${categoria.nombre}"`);
    console.log(`üìã Grados de la categor√≠a:`, categoria.grados.map(g => g.nombre_grado));
    
    // Verificar si el grado del estudiante est√° en la lista de grados de la categor√≠a
    const gradoEncontrado = categoria.grados.some(grado => {
      const nombreGrado = grado.nombre_grado.toUpperCase().replace(/\s+/g, " ");
      const coincide = nombreGrado === formatoCompleto;
      
      if (coincide) {
        console.log(`‚úÖ Grado encontrado: "${nombreGrado}" coincide con "${formatoCompleto}"`);
      }
      
      return coincide;
    });
    
    if (gradoEncontrado) {
      console.log(`‚úÖ Categor√≠a "${categoria.nombre}" es compatible con grado "${formatoCompleto}"`);
    } else {
      console.log(`‚ùå Categor√≠a "${categoria.nombre}" NO es compatible con grado "${formatoCompleto}"`);
    }
    
    return gradoEncontrado;
  };

  const obtenerCategoriaAutomatica = (area) => {
    if (!area) return null;
    
    console.log(`üéØ Obteniendo categor√≠a autom√°tica para √°rea: "${area}"`);
    
    // Buscar las categor√≠as del √°rea en los datos del backend
    const categoriasArea = areasCategorias[area] || areasCategorias[area.toUpperCase()] || [];
    
    if (categoriasArea.length > 0) {
      console.log(`üìã Categor√≠as disponibles para ${area}:`, categoriasArea);
      
      // Filtrar categor√≠as compatibles con el grado del estudiante
      const categoriasCompatibles = categoriasArea.filter(categoria => 
        gradoEstaEnRango(categoria)
      );
      
      console.log(`‚úÖ Categor√≠as compatibles encontradas:`, categoriasCompatibles.map(c => c.nombre));
      
      // Si hay exactamente una categor√≠a compatible, la devolvemos autom√°ticamente
      if (categoriasCompatibles.length === 1) {
        console.log(`üéâ Categor√≠a autom√°tica seleccionada: "${categoriasCompatibles[0].nombre}"`);
        return categoriasCompatibles[0].nombre;
      }
      
      // Si hay m√∫ltiples categor√≠as compatibles, no seleccionamos autom√°ticamente
      if (categoriasCompatibles.length > 1) {
        console.log(`‚ö†Ô∏è M√∫ltiples categor√≠as compatibles, requiere selecci√≥n manual`);
        return null;
      }
    }
    
    console.log(`‚ùå No se encontr√≥ categor√≠a autom√°tica para ${area} y grado ${formatoCompleto}`);
    return null;
  };

  const obtenerCategorias = (area) => {
    if (!area) {
      console.log("‚ö†Ô∏è obtenerCategorias: Se recibi√≥ un √°rea vac√≠a");
      return ["Sin categor√≠as disponibles"];
    }
    
    console.log(`\nüìã obtenerCategorias para √°rea: "${area}"`);
    console.log(`üîç areasCategorias disponible:`, Object.keys(areasCategorias));
    
    // Buscar las categor√≠as del √°rea en los datos del backend
    const categoriasArea = areasCategorias[area] || areasCategorias[area.toUpperCase()] || [];
    
    console.log(`üéØ Categor√≠as encontradas para "${area}":`, categoriasArea);
    
    if (categoriasArea.length > 0) {
      // FILTRAR CATEGOR√çAS POR GRADO DEL ESTUDIANTE
      const categoriasCompatibles = categoriasArea
        .filter(categoria => gradoEstaEnRango(categoria))
        .map(categoria => categoria.nombre);
      
      console.log(`‚úÖ ${categoriasCompatibles.length} categor√≠as compatibles para ${area}:`, categoriasCompatibles);
      
      // Si hay categor√≠as compatibles, las devolvemos
      if (categoriasCompatibles.length > 0) {
        return categoriasCompatibles;
      }
      
      // Si no hay categor√≠as compatibles, mostrar mensaje espec√≠fico
      console.warn(`‚ö†Ô∏è No se encontraron categor√≠as compatibles para ${area} y grado ${formatoCompleto}`);
      return [`No hay categor√≠as disponibles para ${formatoCompleto}`];
    }
    
    console.log(`‚ùå No se encontraron categor√≠as para √°rea "${area}"`);
    return ["Sin categor√≠as disponibles"];
  };

  return { obtenerCategoriaAutomatica, obtenerCategorias };
}